<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC "-//Hibernate/Hibernate Configuration DTD 3.0//EN" "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
	<session-factory>

		<!-- Database connection setting -->

		<property name="connection.driver_class">org.postgresql.Driver</property>
		<property name="connection.url">jdbc:postgresql://localhost:5432/hibernate</property>
		<property name="connection.username">postgres</property>
		<property name="connection.password">1234</property>

		<!-- JDBC connection pool (use the built in) -->
		<property name="connection.pool_size">1</property>

		<!-- SQL dialect generate datatype, query depend on DBMS -->
		<property name="dialect">org.hibernate.dialect.PostgreSQLDialect</property>

		<!-- Disable the second-level cache -->
		<property name="cache.provider_class">org.hibernate.cache.NoCacheProvider</property>

		<!-- Echo all excute SQL to stdout -->
		<property name="show_sql">true</property>

		<!-- Drop the existing table and create new one(this use for creation only 
			do not use for production, delete it for production) - value : it can hold 
			the value create, update, create-drop, validate -->

		<!-- -create: it will drop existing schema and re-create new one schema 
			base on model class but you will lose all data -->
		<!-- -create-drop: everything will keep remain the same as create, the 
			difference is if you close sessionFactory object hibernate will drop off 
			schema and all data -->
		<!-- -update : everytime you run your app hibernate will just update schema -->
		<!-- -validate: every time you run your app it will just validate your 
			existing schema with the one have annotation it not update or make any changes 
			to database -->
		<property name="hbm2ddl.auto">create</property>

		<!-- Mention here all the model classes along with their package name -->
		<mapping class="n01.main.java.N01_StudentInfoDemo" />

		<!-- CRUD -->
		<mapping class="n02.com.hibernate.CRUD.N02_Student" />

		<!-- One to One -->
		<mapping class="n03.com.hibernate.oneToOneMapping.N03_Student" />
		<mapping class="n03.com.hibernate.oneToOneMapping.N03_Student" />

		<!-- Many To One -->
		<mapping class="n04.com.hibernate.manyToOneMapping.N04_Student" />
		<mapping class="n04.com.hibernate.manyToOneMapping.N04_StudentAddress" />

		<!-- Many To Many -->
		<mapping class="n05.com.hibernate.manyToManyMapping.N05_Student" />
		<mapping
			class="n05.com.hibernate.manyToManyMapping.N05_StudentCertification" />


		<!-- Create table n insert-->
		<mapping class="n06.com.hibernate.startup.N06_Employee" />

		<!-- Compound key -->
		<mapping class="n07.com.hibernate.compoundPrimaryKey.N07_Accounts" />

		<!-- One class to two table -->
		<mapping class="n08.com.hibernate.oneClassToTwoTable.N08_Customer" />

		<!-- Two class to one table -->
		<mapping class="n09.com.hibernate.twoClassToOneTable.N09_School" />

		<!-- Best Strategy is Joined because it doesn't repeat data -->
		<!-- Inheritance SingelTable -->
		<mapping
			class="n10.com.hibernate.inheritanceMapping.singelTable.N10_Project" />
		<mapping
			class="n10.com.hibernate.inheritanceMapping.singelTable.N10_Module" />
		<mapping
			class="n10.com.hibernate.inheritanceMapping.singelTable.N10_Task" />

		<!-- Inheritance Joined -->
		<mapping
			class="n11.com.hibernate.inheritanceMapping.joined.N11_Project" />
		<mapping
			class="n11.com.hibernate.inheritanceMapping.joined.N11_Module" />
		<mapping class="n11.com.hibernate.inheritanceMapping.joined.N11_Task" />

		<!-- Inheritance Table Per Class -->
		<mapping
			class="n12.com.hibernate.inheritanceMapping.tablePerClass.N12_Project" />
		<mapping
			class="n12.com.hibernate.inheritanceMapping.tablePerClass.N12_Module" />
		<mapping
			class="n12.com.hibernate.inheritanceMapping.tablePerClass.N12_Task" />

		<!-- one to one -->
		<mapping class="n13.com.hibernate.oneToOneMapping.N13_Person" />
		<mapping class="n13.com.hibernate.oneToOneMapping.N13_PersonDetail" />

		<!-- one to many -->
		<mapping class="n14.com.hibernate.oneToManyMapping.N14_College" />
		<mapping class="n14.com.hibernate.oneToManyMapping.N14_Student" />

		<!-- Many to many -->
		<mapping class="n15.com.hibernate.manyToManyMapping.N15_Event" />
		<mapping class="n15.com.hibernate.manyToManyMapping.N15_Delegate" />

	</session-factory>
</hibernate-configuration>
