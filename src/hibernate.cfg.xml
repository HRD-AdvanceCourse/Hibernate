<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC "-//Hibernate/Hibernate Configuration DTD 3.0//EN" "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
	<session-factory>

		<!-- Database connection setting -->

		<property name="connection.driver_class">org.postgresql.Driver</property>
		<property name="connection.url">jdbc:postgresql://localhost:5432/hibernate</property>
		<property name="connection.username">postgres</property>
		<property name="connection.password">1234</property>

		<!-- JDBC connection pool (use the built in) -->
		<property name="connection.pool_size">1</property>

		<!-- SQL dialect generate datatype, query depend on DBMS -->
		<property name="dialect">org.hibernate.dialect.PostgreSQLDialect</property>

		<!-- Disable the second-level cache -->
		<property name="cache.provider_class">org.hibernate.cache.NoCacheProvider</property>

		<!-- Echo all excute SQL to stdout -->
		<property name="show_sql">true</property>

	<!-- Drop the existing table and create new one(this use for creation only 
		do not use for production, delete it for production) - value : it can hold 
		the value create, update, create-drop, validate -->

	<!-- -create: it will drop existing schema and re-create new one schema 
		base on model class but you will lose all data -->
	<!-- -create-drop: everything will keep remain the same as create, the difference 
		is if you close sessionFactory object hibernate will drop off schema and 
		all data -->
	<!-- -update : everytime you run your app hibernate will just update schema -->
	<!-- -validate: every time you run your app it will just validate your existing 
		schema with the one have annotation it not update or make any changes to 
		database -->
		<property name="hbm2ddl.auto">create</property>

		<!-- Mention here all the model classes along with their package name -->
		<mapping class="main.java.StudentInfoDemo" />

		<!-- CRUD -->
		<mapping class="com.hibernate.CRUD.StudentCRUD" />

		<!-- Many To Many -->
		<mapping class="com.hibernate.manyToManyMapping.StudentManyToMany" />
		<mapping
			class="com.hibernate.manyToManyMapping.StudentManyToManyCertification" />

		<!-- Many To One -->
		<mapping class="com.hibernate.manyToOneMapping.StudentManyToOne" />
		<mapping class="com.hibernate.manyToOneMapping.StudentManyToOneAddress" />

		<!-- One to One -->
		<mapping class="com.hibernate.oneToOneMapping.StudentOneToOne" />
		<mapping class="com.hibernate.oneToOneMapping.StudentOneToOneDetail" />

		<!-- Chapter 1 n 2 -->
		<mapping class="com.hibernate.chapter1and2.EmployeeChpt1" />

		<!-- Chatper 3 one class to two table -->
		<mapping class="com.hibernate.chapter3.OneClassToTwoTable.CustomerChpt3" />

		<!-- Chatper 3 two class to one table -->
		<mapping class="com.hibernate.chapter3.TwoClassToOneTable.SchoolChpt3" />

		<!-- Chatper 3 compound key -->
		<mapping class="com.hibernate.chapter3.compoundPrimaryKey.AccountsChpt3" />


		<!-- Best Strategy is Joined because it doesn't repeat data -->
		<!-- Chatper 4 Inheritance SingelTable-->
		<mapping class="com.hibernate.chapter4.InheritanceMapping.SingelTable.ProjectChpt4" />
		<mapping class="com.hibernate.chapter4.InheritanceMapping.SingelTable.ModuleChpt4" />
		<mapping class="com.hibernate.chapter4.InheritanceMapping.SingelTable.TaskChpt4" />

		<!-- Chatper 4 Inheritance Joined -->
		<mapping class="com.hibernate.chapter4.InheritanceMapping.Joined.ProjectChpt4" />
		<mapping class="com.hibernate.chapter4.InheritanceMapping.Joined.ModuleChpt4" />
		<mapping class="com.hibernate.chapter4.InheritanceMapping.Joined.TaskChpt4" />

		<!-- Chatper 4 Inheritance Joined -->
		<mapping class="com.hibernate.chapter4.InheritanceMapping.TablePerClass.ProjectChpt4TPC" />
		<mapping class="com.hibernate.chapter4.InheritanceMapping.TablePerClass.ModuleChpt4TPC" />
		<mapping class="com.hibernate.chapter4.InheritanceMapping.TablePerClass.TaskChpt4TPC" />
	</session-factory>
</hibernate-configuration>
