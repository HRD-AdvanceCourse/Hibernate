<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC "-//Hibernate/Hibernate Configuration DTD 3.0//EN" "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
	<session-factory>

		<!-- Database connection setting -->

		<property name="connection.driver_class">org.postgresql.Driver</property>
		<property name="connection.url">jdbc:postgresql://localhost:5432/AnimalBookDB</property>
		<property name="connection.username">postgres</property>
		<property name="connection.password">1234</property>

		<!-- JDBC connection pool (use the built in) -->
		<property name="connection.pool_size">1</property>

		<!-- SQL dialect generate datatype, query depend on DBMS -->
		<property name="dialect">org.hibernate.dialect.PostgreSQLDialect</property>

		<!-- Disable the second-level cache -->
		<property name="cache.provider_class">org.hibernate.cache.NoCacheProvider</property>

		<!-- Echo all excute SQL to stdout -->
		<property name="show_sql">true</property>

		<!-- Drop the existing table and create new one(this use for creation only 
			do not use for production, delete it for production) - value : it can hold 
			the value create, update, create-drop, validate - create: it will drop existing 
			schema and re-create new one schema base on model class but you will lose 
			all data - create-drop: everything will keep remain the same as create, the 
			difference is if you close sessionFactory object hibernate will drop off 
			schema and all data - update : everytime you run your app hibernate will 
			just update schema - validate: every time you run your app it will just validate 
			your existing schema with the one have annotation it not update or make any 
			changes to database -->
		<property name="hbm2ddl.auto">create</property>

		<!-- Mention here all the model classes along with their package name -->
		<mapping class="main.java.Student_Info" />

		<!-- CRUD -->
		<mapping class="com.hibernate.CRUD.Student" />

		<!-- Many To Many -->
		<mapping class="com.hibernate.manyToManyMapping.Student" />
		<mapping class="com.hibernate.manyToManyMapping.StudentCertification" />

		<!-- Many To One -->
		<mapping class="com.hibernate.manyToOneMapping.Student" />
		<mapping class="com.hibernate.manyToOneMapping.StudentAddress" />

		<!-- One to One -->
		<mapping class="com.hibernate.oneToOneMapping.Student" />
		<mapping class="com.hibernate.oneToOneMapping.StudentDetail" />
	</session-factory>
</hibernate-configuration>
